// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// schema.prisma
generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users User[]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  phone     String?
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  printers  Printer[]
  notes     Note[]
}

model Printer {
  id          Int              @id @default(autoincrement())
  model       String
  serialNumber String          @unique
  owner       User             @relation(fields: [ownerId], references: [id])
  ownerId     Int
  repairRequests RepairRequest[]
}

model RepairStatus {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  repairRequests RepairRequest[]
}

model RepairRequest {
  id           Int             @id @default(autoincrement())
  printer      Printer         @relation(fields: [printerId], references: [id])
  printerId    Int
  description  String
  accessories  String?
  status       RepairStatus    @relation(fields: [statusId], references: [id])
  statusId     Int
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  repairParts  RepairPart[]
  shipping     Shipping?
  notes        Note[]
}

model RepairPart {
  id              Int             @id @default(autoincrement())
  repairRequest   RepairRequest   @relation(fields: [repairRequestId], references: [id])
  repairRequestId Int
  partName        String
  quantity        Int
  price           Float
}

model Shipping {
  id              Int             @id @default(autoincrement())
  repairRequest   RepairRequest   @relation(fields: [repairRequestId], references: [id])
  repairRequestId Int             @unique
  courier         String
  trackingNumber  String
  shippedAt       DateTime?
  status          String
}

model Note {
  id              Int             @id @default(autoincrement())
  repairRequest   RepairRequest   @relation(fields: [repairRequestId], references: [id])
  repairRequestId Int
  user            User            @relation(fields: [userId], references: [id])
  userId          Int
  note            String
  createdAt       DateTime        @default(now())
}
